#TODO: Move command
#TODO: "SET" command for environment variables
#TODO: Wildcards on commands (dir, del, copy)
#TODO: File Partitions on diskettes
#TODO: Change drive (c: to a:)
#TODO: Hex Editor
#TODO: Complete the Small FakeASM interruptions

#############Computer Variables #################
#number Screen_MaxPixelsX = 509
#number Screen_MaxPixelsY = 256
number Screen_MaxPixelsX = Width()
number Screen_MaxPixelsY = Height()
number Screen_MaxTextX   = 80
number Screen_MaxTextY   = 13
#################################################

###############ASM Variables#####################
string tmp_str = ""
number tmp_int = 0
number numcode = 0

string maincode = ""

array videomem = []
array stack = []

number AX = 0 #Accumulator
number BX = 0 #Base register
number CX = 0 #Count register
number DX = 0 #Data Register

number CF = 0 #Carry Flag
number ZF = 0 #Zero Flag
number SF = 0 #Sign Flag
    
number SP = 0 #Stack Pointer
number SS = 0 #Stack Segment
number IP = 0 #Instruction Pointer
number CS = 0 #Code Segment
number SI = 0 #Source Index
number DI = 0 #Destination Index
number DS = 0 #Data Segment
number ES = 0 #Extended Segment

bool endcode = False #Ends the Program
#################################################

#############EDITOR Variables####################
bool editor_run = True
bool enable_cursor_changeline = True
bool show_sidemenu = False
number cursor_line = 1
number drawline_init = 0

string TextFile_Path = ""
string TextFile_Name = ""
array TextFile = []
number TextFile_Count = 0
number Screen_MaxLines = 13

number menu_selitem = 1
number menu_xoffset = 0
number menu_count = 7
array menu_itemname = ["Select","Remove Line","Copy","Paste","Save","Load","Quit"]

number edit_mode = 1 #0Readonly, 1Edit, 2Select,3RemoveLine
number edit_selstart = -1
number edit_selend = -1
array  edit_clipboard = []


#################################################

string Current_Drive 
string Current_Directory
array  ReservedWords = ["HELP","COPY","TYPE","DIR","CD","CD..","MD","RD","DEL","VER","EDIT","CLS","FORMAT","SYS","GETMEM","FILEOUT","ASC"]    
init()

void init()
    cls()
    ClearText()
    Color(0,0,0)
    Rect(0,0,512,257)
    Color(1,1,1)
    DisplayGraphics()
    BootManager()    
    OS_Init()

end

void OS_Init()
    #Booting on c:\
    Current_Drive = "C"
    Current_Directory = ""
    #MAIN LOOP
    loop
        CommandPrompt()
    end#loop
end#void

void CommandPrompt()
    string commd
    commd = Current_Drive+":\"+Current_Directory+">"
    commd = Replace(commd,"_","\")    
    commd = Input(commd)
    if commd != ""
        Process_Command(Ucase(commd))
    end#if
end

void Process_Command(string command)
    array cmd = Parse(command, IntToChar(-65))
    cmd[0]=Trim(cmd[0])

#Try to load executable...
    CheckExec(cmd)

#Parse other commands        
    if cmd[0] != "SYS"
        if  HasMemory("OS") == False
            Print("Operational system not detected.")
            Print("Reboot and run 'sys' tool to install it on this machine.")    
            break
        end#if
    end#if

    if cmd[0] == "ASC"
        PrintASCIITable()
    end#if
    if cmd[0] == "UCASE"
        Print(Ucase("texto"))
    end#if
    if cmd[0] == "CLS"
        ClearText()
        cls()
        Color(0,0,0)
        Rect(0,0,Screen_MaxPixelsX,Screen_MaxPixelsY)
        DisplayGraphics()
    end#if
    if cmd[0] == "PRINTCHARS"
        PrintAllChars()

    end#if
    if cmd[0] == "LOADCODE"
        LoadCode("")
    end#if        
    if cmd[0] == "COPY"        
#----------------------------------------        
        if HasIndex(cmd,1)== False 
            Print("Parameter is missing!")
        else    
            if HasIndex(cmd,2)==True
                string MemDir
                string MemDirTmp
                array arrMem
                string strtmp
                MemDir = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_DIR")
                arrMem = Parse(MemDir,"/")
                #Try to copy to a directory on same path...
                Print(arrMem)
                Print(cmd[1])
                if SearchArray(arrMem,"@"+cmd[2],False) != -1
                Print("aqui")
                   MemDirTmp = LoadMemory(PathFix(Current_Drive,Current_Directory) +"_" + cmd[2] + "_DIR")                    
                   Print(MemDirTmp)
                   strtmp = LoadMemory(PathFix(Current_Drive, Current_Directory)+"_"+cmd[1])
                   Print(PathFix(Current_Drive,Current_Directory)+ "_" + cmd[2])
                   Print(MemDirTmp + "/"+cmd[1])
                   SaveMemory(PathFix(Current_Drive,Current_Directory)+ "_" + cmd[2]+"_DIR",MemDirTmp + "/"+cmd[1])
                   SaveMemory(PathFix(Current_Drive,Current_Directory)+"_"+cmd[2]+"_"+cmd[1],strtmp)
                   Return
                end#if
                #Not a directory... copy file to same dir
                if SearchArray(arrMem,cmd[1],False) != -1
                   strtmp = LoadMemory(PathFix(Current_Drive, Current_Directory)+"_"+cmd[1])
                   SaveMemory(PathFix(Current_Drive,Current_Directory)+"_DIR" ,MemDir +"/"+cmd[2])
                   SaveMemory(PathFix(Current_Drive,Current_Directory)+"_"+cmd[2],strtmp)
                   Return
                end#if
            else    
               Print("Parameter is missing!")
            end#if

        end#if        
#----------------------------------------------
    end#if
    if cmd[0] == "DEL"          
        if HasIndex(cmd,1)== False 
            Print("Parameter is missing!")
        else    
            string MemDir
            array arrMem
            number tmpnum
            MemDir = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_DIR")
            arrMem = Parse(MemDir,"/")
            tmpnum = SearchArray(arrMem,cmd[1],False)
            if tmpnum != -1
               EraseMemory(PathFix(Current_Drive,Current_Directory)+"_"+cmd[1])
               arrMem = arrRemove(arrMem,tmpnum)
               string strtmp
               strtmp = ""
               loop arrMem
                   if strtmp == ""
                       strtmp = @
                   else    
                       strtmp = strtmp + "/" + @
                   end#if
               end#loop
               SaveMemory(PathFix(Current_Drive, Current_Directory)+"_DIR",strtmp)
            else    
                Print("File already exists!")                
            end#if
        end#if
        
    end#if
    if cmd[0] == "DIR"
        if HasIndex(cmd,1) == True
            if cmd[1] == "/?"
                Print("Shows the files and directories.")
            end#if
        else
            number numfiles = 0
            number numdirs  = 0
            number numbytes = 0   
            string MemDir
            array arrMem
            string tmpstr
            if Current_Directory != ""
               arrMem = Parse(Current_Directory,"_")
               if Count(arrMem) <= 1
                  tmpstr = Current_Directory
               else  
                  tmpstr = arrMem[Count(arrMem) - 1]
               end#if
            else    
                tmpstr = Current_Drive + ":\"
            end#if
            Print("Showing files from directory " + tmpstr)
            tmpstr = PathFix(Current_Drive,Current_Directory) + "_DIR"
            MemDir = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_DIR")
            arrMem = Parse(MemDir,"/")
            number numaux
            loop i from 0 to Count(arrMem) - 1
                tmpstr = arrMem[i]
                PrintS("  ")
                if tmpstr[0] == "@"
                    numaux = Count(tmpstr)
                    numaux = 15 - numaux
                    numdirs++
                    Print( Mid(tmpstr,1,Count(tmpstr) - 2) + FillChar(" ",numaux) +" <DIR>")
                else    
                    string straux
                    straux = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_" + tmpstr)
                    numaux = Count(tmpstr)
                    numaux = 15 - numaux
                    numfiles++
                    numbytes += Count(straux)
                    Print(tmpstr + FillChar(" ",numaux) + Count(straux) + " bytes")
                end#if            

            end#loop

            Print(numdirs + " dirs, " + numbytes + " bytes in "+numfiles+" files.")            
            Print("")
        end#if
    end#if
    if cmd[0] == "VER"
        Print(LoadMemory("OS"))
    end#if
    if cmd[0] == "HELP"
        Print("Avaliable Commands:")
        Print("HELP,CD,MD,RD,FILEOUT,EDIT,VER,COPY,DEL,DIR,ASC,CLS,SYS,FORMAT,GETMEM")
    end#if

    if cmd[0] == "EDIT"
        if HasIndex(cmd,1) == True
            Editor_Run( PathFix(Current_Drive,Current_Directory) + "_" + cmd[1], PathFix(Current_Drive,Current_Directory) )
        end#if
        
    end#if
    if cmd[0] == "CD.."
        array arrMem
        if Current_Directory != ""
            arrMem = Parse(Current_Directory,"_")
            if Count(arrMem) == 1
               Current_Directory = ""
            else  
               string tmpdir = ""
               loop x from 0 to Count(arrMem) - 2
                    tmpdir = tmpdir + arrMem[x]
                    if x != Count(arrMem) - 2
                       tmpdir = tmpdir + "_"
                    end#if
               end#loop
               Current_Directory = tmpdir
               tmpdir = ""
            end#if
        end#if
    end#if
    if cmd[0] == "CD"
        if HasIndex(cmd,1)== False 
            Print("Parameter is missing!")
        else    
        string tmpstr
        string MemDir
        array arrMem

        tmpstr = PathFix(Current_Drive,Current_Directory) + "_DIR"
        MemDir = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_DIR")
        arrMem = Parse(MemDir,"/")
       
        if SearchArray(arrMem,"@" + cmd[1],False) == -1
            Print("Directory does not exist!")
         else    
             if cmd[1] == "."
            else if cmd[1] == ".."
                if Current_Directory != ""
                    arrMem = Parse(Current_Directory,"_")
                    if Count(arrMem) == 1
                        Current_Directory = ""
                    else  
                        string tmpdir = ""
                        loop x from 0 to Count(arrMem) - 2
                            tmpdir = tmpdir + arrMem[x]
                            if x != Count(arrMem) - 2
                                tmpdir = tmpdir + "_"
                            end#if
                        end#loop
                        Current_Directory = tmpdir
                        tmpdir = ""
                    end#if
                end#if
            else        
                if Current_Directory == ""
                    Current_Directory = cmd[1]
                else    
                    Current_Directory = Current_Directory + "_" + cmd[1]
                end#if
            end#if
        end#if
        
    end#if
end#if

    if cmd[0] == "MD"
        if HasIndex(cmd,1)== False 
            Print("Parameter is missing!")
        else    
            string MemDir
            array arrMem
            MemDir = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_DIR")
            arrMem = Parse(MemDir,"/")
            if SearchArray(arrMem,cmd[1],False) != -1
                Print("Directory already exists!")
            else    
                SaveMemory(PathFix(Current_Drive,Current_Directory)+"_DIR", MemDir +"/"+ "@"+cmd[1])
                SaveMemory(PathFix(Current_Drive,Current_Directory) + "_" + cmd[1] + "_DIR","@./@..")
            end#if
        end#if
    end#if
    if cmd[0] == "RD"
        if HasIndex(cmd,1)== False 
            Print("Parameter is missing!")
        else    
        string MemDir
        array arrMem
        MemDir = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_DIR")
        arrMem = Parse(MemDir,"/")
        number valsrch = SearchArray(arrMem,"@"+cmd[1],False)
        if valsrch == -1
            Print("Directory does not exist!")
 else
        Remove(arrMem,valsrch)
        MemDir = Concatenate(arrMem,"/")
        MemDir = Left(MemDir,1)
        SaveMemory(PathFix(Current_Drive,Current_Directory)+"_DIR",MemDir)
end#if
end#if
end#if
    if cmd[0] == "FORMAT"
        if HasIndex(cmd,1) == True
            string ans
            if cmd[1] == "C:"
                Print("Formatting will delete all data on drive c:!")
                Print("Do you want to proceed?")
                    ans = Input("type 'YES' to proceed. anything else to cancel.")
                    if ans == "YES"
                    ClearMemories()
                    end#if
            end#if
            if cmd[1] == "A:"
                Print("Formatting will delete all data on drive a:! Do you want to proceed?")
                    ans = Input("type 'YES' to proceed. anything else to cancel.")
                    if ans == "YES"
                    ClearData()
                    end#if
            end#if

        else
        end#if
    end#if
    if cmd[0] == "GETMEM"
        if HasIndex(cmd,1) == False
            array keys = GetMemories()
            Print(keys)
        else
            Print(LoadMemory(cmd[1])+"^")
        end#if
    end#if
       

    if cmd[0] == "FILEOUT"
        if HasIndex(cmd,1)== False 
            Print("Parameter is missing!")
        else    
            string MemDir
            array arrMem
            MemDir = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_DIR")
            arrMem = Parse(MemDir,"/")
            if SearchArray(arrMem,cmd[1],False) != -1
                Print("File already exists!")
            else    
                if HasIndex(cmd,2)==True
                    Print("Saving...")
                    SaveMemory(PathFix(Current_Drive,Current_Directory)+"_DIR",MemDir +"/"+cmd[1])
                    SaveMemory(PathFix(Current_Drive,Current_Directory)+"_"+cmd[1],cmd[2])
                end#if
            end#if
        end#if
    end#if

    if cmd[0] == "TYPE"
        if HasIndex(cmd,1)
            string strtmp = ""
            array tmparr = []
            strtmp = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_" + cmd[1])
            tmparr = Parse(strtmp,IntToChar(-69))#CR/LF
            loop x from 0 to Count(tmparr) - 1
               Print(tmparr[x])
            end#loop
        end#if
    end#if

    if cmd[0] == "SYS"
        if HasIndex(cmd,1)==True
            if cmd[1]=="C:"
                Install_OS()                
                Print("System successfully installed on C:.")
            end#if
    else
            Print("System installer v0.1")
            Print("USAGE: sys <drive>:")
            Print("Mounts the file system on the indicated drive.")
        end#if

end#if
end#void

void CheckExec(array command)
string tmpstr
string MemDir
array arrMem
number tmpnum
number flag = -1
if HasMemory("C_DIR") == False
    Print("No file system detected.")    
end#if
tmpstr = PathFix(Current_Drive,Current_Directory) + "_DIR"
MemDir = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_DIR")
arrMem = Parse(MemDir,"/")
if HasIndex(command,0)
    loop x in ReservedWords
        if command[0] == x
            return
        end#if
    end#loop
end#if
tmpnum = SearchArray(arrMem,command[0],False) 
#On the first attempt, try to run the file exactly as written
if tmpnum != -1 #Found it!
    tmpstr = arrMem[tmpnum]
    arrMem = Parse(tmpstr,".")
    if HasIndex(arrMem,1)
        If arrMem[1] == "COM" or (arrMem[1] == "EXE")
            tmpstr = PathFix(Current_Drive,Current_Directory)
            tmpstr = tmpstr + "_" + command[0]
            ExecFile(tmpstr)
            flag = 1
            return
        else    
            flag = 0
        end#if
    else    
            flag = 0
    end#if
end#if
#On the second attempt, try to run the file exactly w/o extension
array ExecOrder = [".COM",".EXE",".BAT"]
loop x in ExecOrder
    tmpnum = SearchArray(arrMem,command[0]+x,False) 
    if tmpnum != -1 #Found it!
        tmpstr = PathFix(Current_Drive,Current_Directory) 
        tmpstr = tmpstr + "_" + command[0]+x
        ExecFile(tmpstr)
        flag = 1
        return
    end#if
end#loop
    if flag == 0
        Print("File is not executable!")    
    else if flag == -1
        Print("Command not recognized.")
    end#if                
end#void
void Install_OS()
SaveMemory("OS","FakeDOS Version 0.1")
If HasMemory("C_DIR") == False
    SaveMemory("C_DIR","@DOS")
    SaveMemory("C_DOS_DIR","@./@..")    
    LoadCode("")
end#if
end

#-----------------------------------------
# Binary Section
#----------------------------------------
number ExecFile(string path)
    RunASM(path)
end#number

#-----------------------------------------
# BIOS ROM section
#----------------------------------------

void BootManager()
#Memory Test Sequence
    loop x from 0 to 128
        ClearText()
        Color(0,0,0)
        Rect(0,0,510,255)
        Color(1,1,1)
        Text(20,15,"Memory test: " + x*4 + "kb")
        DisplayGraphics()
        Sleep(0.001)
end 

PlaySound("Warning")
Sleep(1.5)
DrawBIOSInfo()
DisplayGraphics()        


Sleep(1)
DrawBIOSInfo()
Text(4,13,"Searching for boot sector in drive A:")
DisplayGraphics()
Sleep(2)
if HasFloppy() == True
    ClearText()
    DrawBIOSInfo()
    Text(4,13,"Searching for boot sector in drive A:")    
    Text(42,13,"Booting...")
    DisplayGraphics()
    Sleep(1)
    BootFromFloppy()
else
    ClearText()
    DrawBIOSInfo()
    Text(4,13,"Searching for boot sector in drive A:")
    Text(42,13,"Not Found")
    Text(4,14,"Booting from Hard Drive...")    
    DisplayGraphics()
end
Sleep(2)
ClearText()
end
string FillComputerName()
    array CompName = Name()
    var LenName = Count(CompName)
    var cnt = 40-LenName
    string finalstr 
    loop x from 1 to Round(cnt/2)
        finalstr = finalstr + " "
    end
    finalstr = finalstr + "Computer Name: "
    finalstr = finalstr + Name()
    loop x from 2 to Round(cnt/2)
        finalstr = finalstr + " "
    end
    return finalstr  
end
void DrawBIOSInfo()
    ClearText()
Color(0,0,0)
Rect(0,0,510,255)
Color(1,1,1)
Text(4,1,"+-------------------------------------------------------+")
Text(4,2,"|"+FillComputerName()+"|")
Text(4,3,"+---------------------------+---------------------------+")
Text(4,4,"| Memory           512kb    | Memory clock      256MHz  |")
Text(4,5,"| Floppy drive A:  Active   | Processor         HEART2M |")
Text(4,6,"| Floppy drive B:  Inactive | Clock             500MHz  |")
Text(4,7,"| Video            StndrdVGA| Cache             65Kb    |")
Text(4,8,"| ROM              ANVIL2.34| Pin 0 Voltage     5.5V    |")
Text(4,9,"| Audio            Speaker  | Pin 1 Voltage     0.04V   |")
Text(4,10,"| Keyboard         Present  | Temperature       44 degC |")
Text(4,11,"+-------------------------------------------------------+")
end


#-----------------------------------------
# Internal Programs
#----------------------------------------
void PrintAllChars()

end#void

void PrintASCIITable()
    loop x from 00 to 28


        PrintS (x + ":"+ IntToChar(x) + " | ")
        PrintS ((x+1*28)+":" + IntToChar(x+1*28)+ " | ")
        PrintS ((x+2*28)+":" + IntToChar(x+2*28)+ " | ")
        PrintS ((-x) + ":" + IntToChar(-x) + " | ")
        PrintS ((-(x+28)) + ":" + IntToChar(-(x+28)) + " | ")
        PrintS ((-(x+2*28)) + ":" + IntToChar(-(x+2*28)) + " | ")
        PrintS ((-(x+3*28)) + ":" + IntToChar(-(x+3*28)) + " | ")        
        Print("")
end#loop
end#void

#-----------------------------------------
# String Manipulation Functions
#----------------------------------------
string PathFix(string Drive, string Dir)
    string ret
    if Dir == ""
        Return(Drive)
    else    
        Return(Drive + "_" + Dir)
end#if
end#string

array Parse(string longtext, string separator)
    #Parse a long string with separators to an array object
    #"a/b/c/d" -> [a,b,c,d]
    #TODO: Allow bigger separator strings
    string tmp = longtext + separator
    string tmpstr=""
    number lastpos = 0
    number j = 0
    array arrtmp = []
    loop i from 0 to Count(tmp) - 1
        if CharToInt(tmp[i]) == CharToInt(separator)
            tmpstr = Mid(tmp,lastpos,i - lastpos)
            Append(arrtmp, tmpstr)
            lastpos = i+1
end#if
end#loop
    loop i from 0 to Count(arrtmp) - 1
        arrtmp[i]=Left(arrtmp[i],1)
end#loop
return arrtmp
end#array
#-------------------------------------
String Mid(string text, number start, number length)
    #Returns a piece of a string
    string endres = ""
    loop i from start to start+length
endres = endres + text[i]
end#loop
    return endres
end
#---------------------------------------
String Left(string text, number length)
    string endres = ""
    number cnt = Count(text) - length
    loop i from 0 to cnt - 1
endres = endres + text[i]
end#loop
    return endres
end#string
#---------------------------------------
string Ucase(string str)
    #Returns the upper case of the argument
    #TODO: limit only to alphabet
    string txt = ""
    number val = 0
    loop x from 0 to (Count(str) - 1)
        val = CharToInt(str[x])
        if val >= 0 and val <= 25
            txt = txt + IntToChar(CharToInt(str[x]) - 32)
    else
        txt = txt + str[x]
end#if
end#loop
    return txt
end
#---------------------------------------
string Lcase(string str)
    #Returns the lower case of the argument
    #TODO: limit only to alphabet
    string txt = ""
    number val = 0 
    loop x from 0 to (Count(str) - 1)
        val = CharToInt(str[x])
        if val >= -32 and val <= -7
        txt = txt + IntToChar(val + 32)
    else
        txt = txt + str[x]
end#if
end#loop
    return txt
end
#---------------------------------------
String Trim(string str)
    number val = 0
    string tmp = ""
    loop i from 0 to Count(str) - 1
        if CharToInt(str[i]) != -65
            tmp = tmp + str[i]
end#if
end#loop
return tmp
end#string
#---------------------------------------
string Concatenate(array strarr, string separator)
    string strtemp = ""
    loop i from 0 to Count(strarr) - 1
        strtemp = strtemp + strarr[i] + separator
end#loop
    return strtemp
end#string
#---------------------------------------
string FillChar(string char, number n)
    string ret
    loop x from 0 to n - 1
        ret = ret + char
    end#loop
    return ret
end#string
#-----------------------------------------
# Array Manipulation Functions
#----------------------------------------

number SearchArray(array arrsource, string textsrc, bool CaseSensitive)
    number retcode = -1
    number len = 0
    if CaseSensitive == True
        loop i from 0 to Count(arrsource) - 1
            if arrsource[i] == textsrc
                retcode = i
            end#if
        end#loop
    else    
        loop i from 0 to Count(arrsource) - 1
            if Ucase(arrsource[i]) == Ucase(textsrc)
                retcode = i
            end#if
        end#loop
    end#if
    Return retcode
end#number
















#-------------------------------------------------
#
#
#          EMBEDDED TEXT EDITOR CODE
#
#-------------------------------------------------


void Editor_Run(string filekey, string path)
##############################
    Editor_LoadFile(filekey, path)
    Editor_Init()
    Editor_MainLoop()
##############################
end#void
void Editor_Init()
    cls()
    ClearText()
    DisplayGraphics()
end#void
    
void Editor_MainLoop()
    loop 
    #Resets Screen
    cls() #stupid but necessary
    Color(0,0,0)
    Rect(0,0,Width(),Height())
    Editor_DrawBackBuffer()
    if editor_run == False
        cls()        
        ClearText()
        DisplayGraphics()
        Color(0,0,0)
        Rect(0,0,512,257)
        Color(1,1,1)
        DisplayGraphics()
        editor_run = True
        break

    end#if
end#loop
end#void

void cls()
    loop y from -2 to 35
    Text(-5,y,"                                             ")
    end#loop
end#void

void Editor_DrawBackBuffer()
    Editor_ReadKeyboard() #Read Keyboard status
    #ProcessStates() #Process keyboard actions
    Editor_DrawText() #Draws text
    Editor_DrawWindow() #Draws windows
    Editor_DrawCursor()
    DisplayGraphics()
end#void

void Editor_ReadKeyboard()
    if IsKeyPressed("left")
        show_sidemenu = True
        enable_cursor_changeline = False
        menu_xoffset = 4
    end#if
    if IsKeyPressed("right")
        show_sidemenu = False
        enable_cursor_changeline = True
        menu_xoffset = 0
        if Between(cursor_line - 1,edit_selstart,edit_selend) == True
            edit_mode = 1
            edit_selstart = -1
            edit_selend = -1
        end#if
        if edit_mode == 3
            edit_mode = 1
        end#if
    end#if
    if IsKeyPressed("down")
        if enable_cursor_changeline == False
            if Between(menu_selitem,1,6) == True
                menu_selitem += 1
                Sleep(0.1)
            end#if
        end#if        

        if enable_cursor_changeline == True
            if cursor_line < Screen_MaxLines
                if cursor_line < TextFile_Count
                    cursor_line += 1
                end#if
                if cursor_line == TextFile_Count
                    if TextFile[TextFile_Count - 1] != ""
                        Append(TextFile,"")
                        TextFile_Count = Count(TextFile)
                        cursor_line += 1
                    end#if
                end#if
else
            if drawline_init + Screen_MaxLines < TextFile_Count        
                drawline_init += 1
            end#if
            end#if
            Sleep(0.05)
        end#if
    end#if
        
    if IsKeyPressed("up")
        if enable_cursor_changeline == False
            if Between(menu_selitem,2,7) == True
                menu_selitem -= 1
                Sleep(0.1)
            end#if
        end#if        

                            
        if enable_cursor_changeline == True
            if cursor_line > 1
                cursor_line -= 1
                Sleep(0.05)
    else
            if drawline_init != 0
                drawline_init -= 1
                Sleep(0.05)
            end#if
            end#if
    end#if
    end#if
    if IsKeyPressed("space")
        if show_sidemenu == False
            if edit_mode == 1
                ClearText()
                number numline = cursor_line - 1
                loop x from 0 to numline - 1
                    Print(" ")
                end#loop
                Print(TextFile[numline + drawline_init])
                string new_input = Input("")
                if new_input != "" 
                    TextFile[numline + drawline_init] = new_input
                end#if
                Sleep(0.1)
            end#if    
            if edit_mode == 2
                number numline = cursor_line - 1                                
                if edit_selstart == -1
                    if edit_selend == -1
                        edit_selstart = numline
                    else
                        edit_selend = numline
                        edit_mode = 1
                    end#if
                else
                    if edit_selend != -1
                        edit_selend = numline
                        edit_mode = 1
                    end#if
                end#if
                Sleep(0.1)
            end#if
            if edit_mode == 3
                number numline = cursor_line - 1                
                TextFile = arrRemove(TextFile,numline)
                TextFile_Count = Count(TextFile)
                Sleep(0.1)
            end#if
        end#if
        if show_sidemenu == True
            if menu_selitem == 1 #SELECT
                edit_mode = 2
                edit_selstart = -1
                edit_selend = -1
                show_sidemenu = False
                enable_cursor_changeline = True
                menu_xoffset = 0
                
            end#if
            if menu_selitem == 2 #REMOVE LINE
                edit_mode = 3
                show_sidemenu = False
                enable_cursor_changeline = True
                menu_xoffset = 0
                Sleep(0.1)
            end#if
            if menu_selitem == 3 #COPY
                show_sidemenu = False
                enable_cursor_changeline = True
                menu_xoffset = 0
                loop x from edit_selstart to edit_selend
                    Append(edit_clipboard,TextFile[x])
                end#loop
                Sleep(0.1)
            end#if
            if menu_selitem == 4 #PASTE
                show_sidemenu = False
                enable_cursor_changeline = True
                menu_xoffset = 0
                number numline = cursor_line - 1
                array arrTemp = []
                loop x from 0 to numline - 1
                    Append(arrTemp,TextFile[x])
                end#loop
                                    
                loop x from 0 to Count(edit_clipboard) - 1
                    Append(arrTemp,edit_clipboard[x])
                end#loop
                loop x from numline to TextFile_Count - 1
                    Append(arrTemp,TextFile[x])
                end#loop    
                TextFile = arrTemp
                TextFile_Count = Count(TextFile)
                Sleep(0.1)
            end#if

            if menu_selitem == 5 #SAVE
                string strtmp = ""
                if TextFile_Count >= 2
                    loop x from 0 to TextFile_Count - 2
                        strtmp = strtmp + TextFile[x] + IntToChar(-69)
                    end#loop
                end#if
                if TextFile[TextFile_Count - 1] != ""
                   strtmp = strtmp + TextFile[TextFile_Count - 1]
                end#if
                string MemDir
                Sleep(0.05)
                loop
                    if HasIndex(strtmp,Count(strtmp) - 1)
                        if strtmp[Count(strtmp) - 1] == IntToChar(-69)
                            strtmp = Mid(strtmp,0, Count(strtmp) - 2)
                        else    
                            break
                        end#if
                    end#if
                end#loop

                array arrMem
                MemDir = LoadMemory(PathFix(Current_Drive,Current_Directory) + "_DIR")
                arrMem = Parse(MemDir,"/")
                if SearchArray(arrMem,TextFile_Name,False) != -1
                    SaveMemory(TextFile_Path,strtmp)
                    Say("Saved!")                  
                else    
                    SaveMemory(PathFix(Current_Drive,Current_Directory)+"_DIR" ,MemDir +"/"+TextFile_Name)
                    SaveMemory(PathFix(Current_Drive,Current_Directory)+"_"+ TextFile_Name,strtmp)
                    Say("Saved!")
                end#if


                    
            end#if

            if menu_selitem == 6 #LOAD
            end#if
                
            if menu_selitem == 7 #QUIT
                show_sidemenu = False
                enable_cursor_changeline = True
                menu_xoffset = 0
                menu_selitem = 1
                editor_run = False
            end#if                

        end#if
   end#if
end#void
    
void ProcessStates()
end#void
    
void Editor_DrawWindow()
    #Draws Menu window
    Color(0,0.3,1)
    Rect(0,0,Width(),10)
    Color(1,1,1)
    Rect(0,11,Screen_MaxPixelsX,Screen_MaxPixelsY)
    Color(0,0,0)
    Rect(1,12,Screen_MaxPixelsX - 1,Screen_MaxPixelsY - 1)
    #Draws Menu Options
    Color(0,0,0)
    Text(-1,-1,"EDIT - " + TextFile_Name)
    if edit_mode == 1
        Text(20,-1,"EDIT")
    end#if
    if edit_mode == 2
        Color(0,1,0)
        Text(20,-1,"SELECT")
        Color(0,0,0)
    end#if
    if edit_mode == 3
        Color(1,0,0)
        Text(20,-1,"REMOVE")
        Color(0,0,0)
    end#if

    Text(28,-1,drawline_init + cursor_line)
    #Draws Side Menu
    if show_sidemenu == True
        Color(1,1,1)
        Rect(0,12,30,127)
        number base_x = 0
        number base_y = 0

        #Draw selection box

        base_x = 3
        base_y = 15
        Color(0,0,0)
        Lines([base_x,base_y,base_x,base_y + 14 , base_x + 22,base_y + 13])
        Lines([base_x,base_y,base_x + 22,base_y,base_x + 22,base_y + 13])        
        Rect(base_x,base_y + 5,base_x + 21,base_y + 9)
        Color(0,0,1)
        Rect(base_x + 4,base_y + 4,base_x + 17,base_y + 10)
        Color(0,0,0)

        #Draw Remove Line box

        base_x = 3
        base_y = 30
        Color(0,0,0)
        Lines([base_x,base_y,base_x,base_y + 14 , base_x + 22,base_y + 13])
        Lines([base_x,base_y,base_x + 22,base_y,base_x + 22,base_y + 13])        
        Color(1,0,0)
        Lines([base_x + 5, base_y + 3, base_x + 14, base_y + 12,base_x + 14, base_y + 11, base_x + 5, base_y + 2])
        Lines([base_x + 15, base_y + 3,base_x + 5,base_y + 12, base_x + 5, base_y + 11, base_x + 15, base_y + 2])
        Color(0,0,0)

        #Draw Copy box        

        base_x = 3
        base_y = 45
        Color(0,0,0)
        Lines([base_x,base_y,base_x,base_y + 14 , base_x + 22,base_y + 13])
        Lines([base_x,base_y,base_x + 22,base_y,base_x + 22,base_y + 13])        
        Lines([base_x + 7, base_y + 2, base_x + 6, base_y + 10, base_x + 16, base_y + 10, base_x + 16, base_y + 4, base_x + 11, base_y + 4,  base_x + 12, base_y + 3,  base_x + 6, base_y + 2])
        Line(base_x + 12, base_y + 2, base_x + 16, base_y + 4)
        Color(0,0,0)

        #Draw Paste box

        base_x = 3
        base_y = 60
        Color(0,0,0)
        Lines([base_x,base_y,base_x,base_y + 14 , base_x + 22,base_y + 13])
        Lines([base_x,base_y,base_x + 22,base_y,base_x + 22,base_y + 13])        
        Lines([base_x + 7, base_y + 3, base_x + 6, base_y + 11, base_x + 16, base_y + 11, base_x + 16, base_y + 5, base_x + 11, base_y + 5,  base_x + 12, base_y + 4,  base_x + 6, base_y + 3])
        Line(base_x + 12, base_y + 3, base_x + 16, base_y + 5)
        Lines([base_x + 11, base_y + 3,base_x + 11, base_y + 1, base_x + 3, base_y + 1, base_x + 3, base_y + 10, base_x + 7, base_y + 9]) 
        Color(0,0,0)

        #Draw save box        

        base_x = 3
        base_y = 75
        Color(0,0,0)
        Lines([base_x,base_y,base_x,base_y + 14 , base_x + 22,base_y + 13])
        Lines([base_x,base_y,base_x + 22,base_y,base_x + 22,base_y + 13])        
        Color(0,0,0)
        Rect(base_x + 3,base_y + 2 ,base_x + 17 ,base_y + 12)
        Color(0.5,0.5,0.5)
        Rect(base_x + 6,base_y + 8 ,base_x + 14 ,base_y + 12)
        Color(0,0,0)
        Rect(base_x + 10,base_y + 9 ,base_x + 12 ,base_y + 11)        

        #Draw load box        

        base_x = 3
        base_y = 90
        Color(0,0,0)
        Lines([base_x,base_y,base_x,base_y + 14 , base_x + 22,base_y + 13])
        Lines([base_x,base_y,base_x + 22,base_y,base_x + 22,base_y + 13])        
        Color(0,0,0)
        Rect(base_x + 3,base_y + 2 ,base_x + 17 ,base_y + 12)
        Color(0.5,0.5,0.5)
        Rect(base_x + 6,base_y + 8 ,base_x + 14 ,base_y + 12)
        Color(0,0,0)
        Rect(base_x + 10,base_y + 9 ,base_x + 12 ,base_y + 11)        
        #Draw exit box

        base_x = 3
        base_y = 105
        Color(0,0,0)
        Lines([base_x,base_y,base_x,base_y + 14 , base_x + 22,base_y + 13])
        Lines([base_x,base_y,base_x + 22,base_y,base_x + 22,base_y + 13])        
        Lines([base_x + 8, base_y + 9 ,base_x + 8 ,base_y + 2,base_x + 14,base_y + 2, base_x + 18, base_y + 6, base_x + 18, base_y + 13, base_x + 14, base_y + 9, base_x + 14, base_y + 3])
        Color(1,0,0)
        Lines([base_x + 03, base_y + 06, base_x + 8, base_y + 06,base_x + 8, base_y + 04,    base_x + 11, base_y + 07, base_x + 8, base_y + 10, base_x + 8, base_y + 7,  base_x + 3, base_y + 7])
        Color(0,0,0)
        
        #Draw selected item
        Color(1,1,1)
        number sel_y = 15 * menu_selitem
        sel_y += 2
        Rect(35, sel_y,150, sel_y + 15)
        Color(0,0,0)
        Text(4,-1 + 2 * menu_selitem, menu_itemname[menu_selitem - 1])
    end#if
end#void
    
void Editor_DrawText()
    number y_init = 1
    number loopline = 0
    Color(1,1,1)
    number drawline_end
    number drawrange 
    if TextFile_Count > Screen_MaxLines - 1
        drawrange = drawline_init + Screen_MaxLines
        if drawrange > TextFile_Count - 1
            drawline_end = TextFile_Count - 1
        else    
            drawline_end = drawrange
        end#if

    else    
        drawline_end = TextFile_Count - 1
    end#if
        
    loop y from drawline_init to drawline_end
        if Between(y,edit_selstart,edit_selend) == True
            Color(0,1,0)
        else    
            Color(1,1,1)
        end#if
        Text(menu_xoffset,y_init + loopline,TextFile[y])
        loopline += 1   
    end#loop
    
end#void

void Editor_DrawCursor()
    number y_init = 10
    number y_linepixelratio = 8
    number cursor_linepixel
    if enable_cursor_changeline == True
        Color(1,1,1)
        cursor_linepixel = y_init
        cursor_linepixel += cursor_line * y_linepixelratio    
        Rect(0,cursor_linepixel,5,cursor_linepixel + 8)
        if edit_mode == 2
            if edit_selstart != -1
                edit_selend = cursor_line - 1
            end#if
        end#if
    end#if
end#void
#--------------------------------------------------
#ASM CODE
#--------------------------------------------------


void ConvertCode()
    string rect_prog = "300001300001300001300001300001301F01300001301F01090309057B"
    string line_prog = "300001300001300001300001300001301F01300001301F01090609057B"
    string color_line_prog = "30FF013000013000010907300001300001300001300001300001301F01300001301F01090609057B"
    string clock_keyb = "300A01300A010908090B300A01300C01301C090B300A01300D010909090B0905090A4E055B002A5A00007B"
    string code
    code = clock_keyb
    loop x from 0 to (Count(code)/2) - 1
        AddCode(code[2*x]+code[2*x+1])
    end#loop
end#void
void LoadCode(string codefile)
ConvertCode()
if codefile != ""
    maincode = LoadMemory(codefile)
    return
end#if
if HasMemory("C_TESTASM.EXE") == False
    string tmpstr
    tmpstr = LoadMemory("C_DIR")
    tmpstr = tmpstr + "/ASMTEST.EXE"
    SaveMemory("C_DIR",tmpstr)
    SaveMemory("C_ASMTEST.EXE",maincode)
end#if
end#void
    


void RunASM(string codefile)
    LoadCode(codefile)
#    FillVideoMemory(" ") #Fills the backbuffer with spaces
    loop
    #exits program
        if endcode == True
            break
        end#if
        numcode = CharToInt(maincode[IP])
        #Parse the code...
########[PUSH 01-04]###################################################
        if numcode == 00 #NOP
            #NOTHING TO DO HERE...
        else if numcode == 01 #PUSH AX
                PUSH_AX()
        else if numcode == 02 #PUSH BX
                PUSH_BX()
        else if numcode == 03 #PUSH CX        
                PUSH_CX()
        else if numcode == 04 #PUSH DX        
                PUSH_DX()
########[POP  05-08]###################################################
        else if numcode == 05 #POP  AX
                POP_AX()
        else if numcode == 06 #POP  BX
                POP_BX()
        else if numcode == 07 #POP  CX
                POP_CX()
        else if numcode == 08 #POP  DX                                
                POP_DX()
########[INT  09]######################################################
        else if numcode == 09 #INT
             #Interruption Calls
             IP++
             numcode = CharToInt(maincode[IP])
             if numcode ==01 #INT 01h
             ASM_Print()
        else if numcode ==02 #INT 02h

        else if numcode ==03 #INT_03h_RECT
             ASM_Rect()
        else if numcode ==04 #INT_04h_TEXT
             ASM_Text()
        else if numcode ==05 #INT_05h_DISPLAY_GRAPHICS
             DisplayGraphics()
        else if numcode ==06 #INT_06h_LINE
             ASM_Line()
        else if numcode ==07 #INT_07h_COLOR
            ASM_Color()
        else if numcode ==08 #INT_08h_GET_HOUR
            ASM_GetHour()
        else if numcode ==09 #INT_09h_GET_MINUTE
            ASM_GetMinute()
        else if numcode ==10 #INT_0Ah_GET_KEYBOARD_STATE
            ASM_GetKeyboardState()
        else if numcode ==11 #INT_0Bh_TEXT_RAW
            ASM_Text_Raw()    


             end#if
########[MOV  48-77]###################################################
        else if numcode == 48 #MOV AX, (number)
                IP++
                AX = CharToInt(maincode[IP])
        else if numcode == 49 #MOV AX, [ADDRESS]
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)
                AX = CharToInt(maincode[tmp_int])
        else if numcode == 50 #MOV AX, REG                    
                IP++
                AX = IntToReg(CharToInt(maincode[IP]))
        else if numcode == 51 #MOV BX, (number)
                IP++
                BX = CharToInt(maincode[IP])
        else if numcode == 52 #MOV BX, [ADDRESS]
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)
                BX = CharToInt(maincode[tmp_int])
        else if numcode == 53 #MOV BX, REG                    
                IP++
                CX = IntToReg(CharToInt(maincode[IP]))
        else if numcode == 54 #MOV CX, (number)
                IP++
                CX = CharToInt(maincode[IP])
        else if numcode == 55 #MOV CX, [ADDRESS]
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)
                CX = CharToInt(maincode[tmp_int])
        else if numcode == 56 #MOV CX, REG                    
                IP++
                CX = IntToReg(CharToInt(maincode[IP]))
        else if numcode == 57 #MOV DX, (number)
                IP++
                DX = CharToInt(maincode[IP])
        else if numcode == 58 #MOV DX, [ADDRESS]
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)
                DX = CharToInt(maincode[tmp_int])
        else if numcode == 59 #MOV DX, REG                    
                IP++
                DX = IntToReg(CharToInt(maincode[IP]))
        else if numcode == 60 #MOV SP, (number)
                IP++
                SP = CharToInt(maincode[IP])
        else if numcode == 61 #MOV SP, [ADDRESS]
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)
                SP = CharToInt(maincode[tmp_int])
        else if numcode == 62 #MOV SP, REG                    
                IP++
                SP = IntToReg(CharToInt(maincode[IP]))
        else if numcode == 63 #MOV IP, (number)
                IP++
                IP = CharToInt(maincode[IP])
        else if numcode == 64 #MOV IP, [ADDRESS]
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)
                IP = CharToInt(maincode[tmp_int])
        else if numcode == 65 #MOV IP, REG                    
                IP++
                IP = IntToReg(CharToInt(maincode[IP]))
        else if numcode == 66 #MOV CS, (number)
                IP++
                CS = CharToInt(maincode[IP])
        else if numcode == 67 #MOV CS, [ADDRESS]
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)
                CS = CharToInt(maincode[tmp_int])
        else if numcode == 68 #MOV CS, REG                    
                IP++
                CS = IntToReg(CharToInt(maincode[IP]))
        else if numcode == 69 #MOV SI, (number)
                IP++
                SI = CharToInt(maincode[IP])
        else if numcode == 70 #MOV SI, [ADDRESS]
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)
                SI = CharToInt(maincode[tmp_int])
        else if numcode == 71 #MOV SI, REG                    
                IP++
                SI = IntToReg(CharToInt(maincode[IP]))
        else if numcode == 72 #MOV DI, (number)
                IP++
                DI = CharToInt(maincode[IP])
        else if numcode == 73 #MOV DI, [ADDRESS]
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)
                DI = CharToInt(maincode[tmp_int])
        else if numcode == 74 #MOV DI, REG                    
                IP++
                DI = IntToReg(CharToInt(maincode[IP]))
        else if numcode == 75 #MOV DS, (number)
                IP++
                DS = CharToInt(maincode[IP])
        else if numcode == 76 #MOV DS, [ADDRESS]
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)
                DS = CharToInt(maincode[tmp_int])
        else if numcode == 77 #MOV DS, REG                    
                IP++
                DS = IntToReg(CharToInt(maincode[IP]))
########[CMP  78-89]###################################################
        else if numcode == 78 #CMP AX, (number)
                IP++
                tmp_int = CharToInt(maincode[IP])
                if AX == 0
                    ZF = 1
                else    
                    ZF = 0
                end#if
                if AX == tmp_int
                    CF = 1
                else    
                    CF = 0
                end#if
                if AX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if
        else if numcode == 79 #CMP AX, [ADDRESS]        
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)

                tmp_int = CharToInt(maincode[IP])
                if AX == 0
                    ZF = 1
                else    
                    ZF = 0
                end#if
                if AX == tmp_int
                    CF = 1
                 else    
                    CF = 0
                end#if
                if AX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if        
        else if numcode == 80 #CMP AX, REG       
                IP++
                tmp_int = IntToReg(CharToInt(maincode[IP]))
                if AX == 0
                     ZF = 1
                else    
                     ZF = 0
                end#if
                if AX == tmp_int
                    CF = 1
                else    
                    CF = 0
                end#if
                if AX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if
        else if numcode == 81 #CMP BX, (number)
                IP++
                tmp_int = CharToInt(maincode[IP])
                if BX == 0
                    ZF = 1
                else    
                    ZF = 0
                end#if
                if BX == tmp_int
                    CF = 1
                else    
                    CF = 0
                end#if
                if BX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if
        else if numcode == 82 #CMP BX, [ADDRESS]        
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)

                tmp_int = CharToInt(maincode[IP])
                if BX == 0
                    ZF = 1
                else    
                    ZF = 0
                end#if
                if BX == tmp_int
                    CF = 1
                 else    
                    CF = 0
                end#if
                if BX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if        
        else if numcode == 83 #CMP BX, REG       
                IP++
                tmp_int = IntToReg(CharToInt(maincode[IP]))
                if BX == 0
                     ZF = 1
                else    
                     ZF = 0
                end#if
                if BX == tmp_int
                    CF = 1
                else    
                    CF = 0
                end#if
                if BX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if
        else if numcode == 84 #CMP CX, (number)
                IP++
                tmp_int = CharToInt(maincode[IP])
                if CX == 0
                    ZF = 1
                else    
                    ZF = 0
                end#if
                if CX == tmp_int
                    CF = 1
                else    
                    CF = 0
                end#if
                if CX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if
        else if numcode == 85 #CMP CX, [ADDRESS]        
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)

                tmp_int = CharToInt(maincode[IP])
                if CX == 0
                    ZF = 1
                else    
                    ZF = 0
                end#if
                if CX == tmp_int
                    CF = 1
                 else    
                    CF = 0
                end#if
                if CX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if        
        else if numcode == 86 #CMP CX, REG       
                IP++
                tmp_int = IntToReg(CharToInt(maincode[IP]))
                if CX == 0
                     ZF = 1
                else    
                     ZF = 0
                end#if
                if CX == tmp_int
                    CF = 1
                else    
                    CF = 0
                end#if
                if CX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if
        else if numcode == 87 #CMP DX, (number)
                IP++
                tmp_int = CharToInt(maincode[IP])
                if DX == 0
                    ZF = 1
                else    
                    ZF = 0
                end#if
                if DX == tmp_int
                    CF = 1
                else    
                    CF = 0
                end#if
                if DX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if
        else if numcode == 88 #CMP DX, [ADDRESS]        
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                IP++
                tmp_str += IntToHex(CharToInt(maincode[IP]))
                tmp_int = HexToInt(tmp_int)

                tmp_int = CharToInt(maincode[IP])
                if DX == 0
                    ZF = 1
                else    
                    ZF = 0
                end#if
                if DX == tmp_int
                    CF = 1
                 else    
                    CF = 0
                end#if
                if DX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if        
        else if numcode == 89 #CMP DX, REG       
                IP++
                tmp_int = IntToReg(CharToInt(maincode[IP]))
                if DX == 0
                     ZF = 1
                else    
                     ZF = 0
                end#if
                if DX == tmp_int
                    CF = 1
                else    
                    CF = 0
                end#if
                if DX > tmp_int
                    SF = 1
                else    
                    SF = 0
                end#if
########[JMP  90-96]###################################################
        else if numcode == 90 #JMP [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP = HexToInt(tmp_str) - 1
        else if numcode == 91 #JE [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             if CF == 1 
                 IP = HexToInt(tmp_str) - 1
             end#if                   

        else if numcode == 92 #JNE [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             if CF == 0 
                 IP = HexToInt(tmp_str) - 1
             end#if                   


        else if numcode == 93 #JG [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             if SF == 1
                 IP = HexToInt(tmp_str) - 1
             end#if                   


        else if numcode == 94 #JGE [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             if SF == 1
                 IP = HexToInt(tmp_str) - 1
             end#if                   
             if CF == 1 
                 IP = HexToInt(tmp_str) - 1
             end#if                   

        else if numcode == 95 #JL [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             if SF == 0
                 IP = HexToInt(tmp_str) - 1
             end#if                   
        else if numcode == 96 #JLE [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             if SF == 0
                 IP = HexToInt(tmp_str) - 1
             end#if                   
             if CF == 1 
                 IP = HexToInt(tmp_str) - 1
             end#if                   
########[MATH 97-120]##################################################
        else if numcode == 97 #ADD (number)
             IP++
             CX += CharToInt(maincode[IP])
        else if numcode == 98 #ADD [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             CX += HexToInt(tmp_str)
        else if numcode == 99 #ADD AX
             CX += AX
        else if numcode == 100 #ADD BX
             CX += BX
        else if numcode == 101 #ADD CX
             CX += CX
        else if numcode == 102 #ADD DX
             CX += DX
        else if numcode == 103 #SUB (number)
             IP++
             CX -= CharToInt(maincode[IP])
        else if numcode == 104 #SUB [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             CX -= HexToInt(tmp_str)
        else if numcode == 105 #SUB AX
             CX -= AX
        else if numcode == 106 #SUB BX
             CX -= BX
        else if numcode == 107 #SUB CX
             CX -= CX
        else if numcode == 108 #SUB DX
             CX -= DX
        else if numcode == 109 #MULT (number)
             IP++
             CX = CX * CharToInt(maincode[IP])
        else if numcode == 110 #MULT [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             CX = CX * HexToInt(tmp_str)
        else if numcode == 111 #MULT AX
             CX = CX * AX
        else if numcode == 112 #MULT BX
             CX = CX * BX
        else if numcode == 113 #MULT CX
             CX = CX * CX
        else if numcode == 114 #MULT DX
             CX = CX * DX
        else if numcode == 115 #DIV (number)
             IP++
             CX = Int(CX / CharToInt(maincode[IP]))
             DX = Mod(CX, CharToInt(maincode[IP]))
        else if numcode == 116 #DIV [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             CX = Int(CX / HexToInt(tmp_str))
             DX = Mod(CX, HexToInt(tmp_str))
        else if numcode == 117 #DIV AX
             CX = Int(CX / AX)
             DX = Mod(CX, AX)
        else if numcode == 118 #DIV BX
             CX = Int(CX / AX)
             DX = Mod(CX, AX)
        else if numcode == 119 #DIV CX
             CX = Int(CX / AX)
             DX = Mod(CX, AX)             
        else if numcode == 120 #DIV DX
             CX = Int(CX / AX)
             DX = Mod(CX, AX)             
########[CALL 121-122]#################################################
        else if numcode == 121 #CALL [ADDRESS]
             tmp_str = ""
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             IP++
             tmp_str = tmp_str + IntToHex(CharToInt(maincode[IP]))
             SI = IP
             DI = HexToInt(tmp_str) - 1
             IP = DI
        else if numcode == 122 #RET
             IP = SI + 1
        else if numcode == 123 #END
             endcode = True
        end#if
      IP++ #Next instruction
    end#loop
end#void
number IntToReg(number reg)
    # 00 AX
    # 01 BX
    # 02 CX
    # 03 DX
    # 04 CF
    # 05 ZF
    # 06 SF
    # 07 SP
    # 08 SS
    # 09 IP
    # 10 CS
    # 11 SI
    # 12 DI
    # 13 DS
    # 14 ES
         if reg==0
            return AX
    else if reg==1
            return BX
    else if reg==2
            return CX
    else if reg==3
            return DX
    else if reg==4
            return CF
    else if reg==5
            return ZF
    else if reg==6
            return SF
    else if reg==7
            return SP
    else if reg==8
            return SS
    else if reg==9
            return IP
    else if reg==10
            return CS
    else if reg==11
            return SI
    else if reg==12
            return DI
    else if reg==13
            return DS
    else if reg==14
            return ES
    end#if
end#number

void POP_AX()
    #Removes item from top of the stack and send to AX
    SS = Count(stack) - 1
    AX = stack[SS]
    stack = arrRemove(stack,SS)
    SS--
end#void
void PUSH_AX()
    #Copy value of AX to the top of the stack
    Append(stack,AX)
    SS++
end#void

void POP_BX()
    #Removes item from top of the stack and send to BX
    SS = Count(stack) - 1
    BX = stack[SS]
    stack = arrRemove(stack,SS)
    SS--
end#void
void PUSH_BX()
    #Copy value of BX to the top of the stack
    Append(stack,BX)
    SS++
end#void

void POP_CX()
    #Removes item from top of the stack and send to CX
    SS = Count(stack) - 1
    CX = stack[SS]
    stack = arrRemove(stack,SS)
    SS--
end#void
void PUSH_CX()
    #Copy value of CX to the top of the stack
    Append(stack,CX)
    SS++
end#void

void POP_DX()
    #Removes item from top of the stack and send to DX
    SS = Count(stack) - 1
    DX = stack[SS]
    stack = arrRemove(stack,SS)
    SS--
end#void
void PUSH_DX()
    #Copy value of DX to the top of the stack
    Append(stack,DX)
    SS++
end#void

void ASM_Print()
    # Interrupt 01h - Prints Char
    # Takes the top two values from the stack
    # initial AX is the data
    number line
    number column
    number data
    data = AX
    POP_AX()
    column = AX
    POP_AX()
    line = AX
    
    videomem[line] = Subst(videomem[line], IntToChar(data), column)
    PrintMemoryBuffer()
end#void
void ASM_Rect()
    # Interrupt 03h - Draws a square
    # Takes the top four values from the stack
    number x0 = 0
    number y0 = 0
    number x1 = 0
    number y1 = 0
    string strhex = ""
    POP_AX()
    strhex = AX
    POP_AX()
    strhex = AX + strhex
    y1 = HexToInt(strhex)
    POP_AX()
    strhex = AX
    POP_AX()
    strhex = AX + strhex
    x1 = HexToInt(strhex)    
    POP_AX()
    strhex = AX
    POP_AX()
    strhex = AX + strhex
    y0 = HexToInt(strhex)
    POP_AX()
    strhex = AX
    POP_AX()
    strhex = AX + strhex
    x0 = HexToInt(strhex)

    Rect(x0,y0,x1,y1)
end#void

void ASM_Text()
    # Interrupt 04h - Prints Text
    # Takes the top two values from the stack
    # initial AX is the data
    number line
    number column
    number data
    data = AX
    POP_AX()
    column = AX
    POP_AX()
    line = AX
    Text(column, line,IntToChar(data))
end#void

void ASM_Text_Raw()
    # Interrupt 0Bh - Prints Raw Text(numbers)
    # Takes the top two values from the stack
    # initial AX is the data
    number line
    number column
    number data
    data = AX
    POP_AX()
    column = AX
    POP_AX()
    line = AX
    Text(column, line,data)
end#void
void ASM_Line()
    # Interrupt 07h - Draws a line
    # Takes the top four values from the stack
    number x0 = 0
    number y0 = 0
    number x1 = 0
    number y1 = 0
    string strhex = ""
    POP_AX()
    strhex = AX
    POP_AX()
    strhex = AX + strhex
    y1 = HexToInt(strhex)
    POP_AX()
    strhex = AX
    POP_AX()
    strhex = AX + strhex
    x1 = HexToInt(strhex)    
    POP_AX()
    strhex = AX
    POP_AX()
    strhex = AX + strhex
    y0 = HexToInt(strhex)
    POP_AX()
    strhex = AX
    POP_AX()
    strhex = AX + strhex
    x0 = HexToInt(strhex)
    Line(x0,y0,x1,y1)
end#void

void ASM_Color()
    # Interrupt 07h - Picks a color
    # Takes the top three values from the stack
    number r = 0
    number g = 0
    number b = 0
    POP_AX()
    b = AX/255
    POP_AX()
    g = AX/255
    POP_AX()
    r = AX/255
    Color(r,g,b)
end#void
void ASM_GetHour()
    # Interrupt 08h - Gets computer hour
    # Puts value on AX
    AX = GetHour()
end#void
    
void ASM_GetMinute()
    # Interrupt 09h - Gets computer Minutes
    # Puts value on AX
    AX = GetMinute()
end#void
        
void ASM_GetKeyboardState()    
    # Interrupt 0Ah - Reads keyboard state
    # Returns value to AX
    # 0 = nothing pressed, 1=left, 2=right, 3=up, 4=down
    # 5 = space
    AX = 0
    if IsKeyPressed("left")
        AX = 1
else if IsKeyPressed("right")
        AX = 2
else if IsKeyPressed("up")
        AX = 3
else if IsKeyPressed("down")
        AX = 4
else if IsKeyPressed("space")                
        AX = 5
    end#if
end#void
#########################################################    
##################Video Memory Functions#################
#########################################################

void PrintMemoryBuffer()
        ClearText()
    loop x from 0 to Count(videomem) - 1
        Print(videomem[x])
    end#loop           
    tmp_int = 0
    tmp_str = ""
end#void    
    
Void FillVideoMemory(string fillchr)
#Fills Video Memory    
    Loop y from 0 to Screen_MaxTextY - 1
        Append(videomem,"")
        loop x from 0 to Screen_MaxTextX - 1
            videomem[y] = videomem[y] + fillchr
        end#loop

    end#loop
end#void
    
#########################################################    
################General Purpose Functions################
#########################################################

void AddCode(string hex)
maincode = maincode + IntToChar(HexToInt(hex))
end#void
    
void DebugPoint()
     loop
         if IsKeyPressed("space")
            Sleep(0.3)
            Print("AX="+AX+",BX="+BX+",CX="+CX+",DX="+DX)
            Print("IP="+IP+",ZF="+ZF+",CF="+CF+",SF="+SF)
            break
        end#if
     end#loop
end#void
    
string IntToHex(number int)
    # Converts an integer number to a hex string
    array num = []
    array Letters = ["A","B","C","D","E","F"]
    string ret = ""
    Append(num,Int(int / 16))
    Append(num, Mod(int, 16))
    number x
    loop y from 0 to Count(num) - 1
        x = num[y]
        if x >= 10    
            if x > 15
                ret = ret + IntToHex(x)
            else    
                ret = ret + Letters[x - 10]
        end#if
    else    
        ret = ret + x
    end#if
    end#loop
    Return ret
end#string
    
number HexToInt(string hex)
    # Converts a hex string to a integer number
    array Letters = ["A","B","C","D","E","F"]
    number hex_count = Count(hex) 
    array hex_ints = []
    number ret = 0
    string tmp = 0
    loop x from 0 to hex_count - 1
        tmp = hex[x]
        loop y from 0 to Count(Letters) - 1
            if hex[x] == Letters[y]
                tmp = 10 + y
            end#if
        end#loop
        Append(hex_ints, tmp)
    end#loop
    number hex_count2
    hex_count2 = hex_count - 1
    loop x from 0 to hex_count2
        ret = ret + Power16(hex_ints[x], hex_count2 - x)        
    end#loop
    Return ret
end#number

number Power16(number n, number p)
    # Auxiliary Function for HexToInt
    # Calculates the p power of 16 and multiplies for n
    number ret = n
    if p == 0
        Return n
    end#if
    loop x from 1 to p 
        ret = ret * 16
    end#loop
    Return ret
end#number

#--------------------------------------------------
#END ASM CODE
#--------------------------------------------------    
void Editor_LoadFile(string filekey, string path)
    #remove path, its not needed
    string tmpstr = ""
    array arrtmp = []
    TextFile_Path = filekey
    arrtmp = Parse(filekey,"_")
    TextFile_Name = arrtmp[Count(arrtmp) - 1]
    tmpstr = LoadMemory(filekey)
    TextFile = Parse(tmpstr,IntToChar(-69)) #-69 for CR/LF
    TextFile_Count = Count(TextFile)                                
end#void
    
void cls_area(x1,x2,y1,y2)
    string spaces = ""
    loop x from x1 to x2
        spaces = spaces + " "
    end#loop
    loop y from y1 to y2
        Text(-1,y,spaces)
    end#loop

end#void

bool Between(number num, number x, number y)
    bool result = False
    if num >= x
        if num <= y
            result = True
        end#if
    end#if
    Return result
end#bool


array arrRemove(array arrwork, number item)
    array arrtemp = []
    loop x from 0 to Count(arrwork) - 1
        if x != item
            Append(arrtemp,arrwork[x])
        end#if
    end#loop
    Return arrtemp
end#void

string Replace(string textstr, string char1, string char2)
    string tmp = ""
    loop x from 0 to Count(textstr) - 1
        if textstr[x] == char1
            tmp = tmp + char2
        else    
            tmp = tmp + textstr[x]
        end#if
    end#loop
    Return tmp
end#string

string Subst(string str, string str2, number pos)
    #Inserts a string str2 into str on the position pos
    string tmp = ""
    loop x from 0 to Count(str) - 1
        if x != pos
            tmp = tmp + str[x]
        else    
            tmp = tmp + str2
        end#if       
    end#loop
    Return tmp
end#string
    